// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: giraffe_service.proto

package proto_models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Giraffe_GiraffeSayHello_FullMethodName = "/proto.Giraffe/GiraffeSayHello"
)

// GiraffeClient is the client API for Giraffe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GiraffeClient interface {
	GiraffeSayHello(ctx context.Context, in *GiraffeRequest, opts ...grpc.CallOption) (*GiraffeReply, error)
}

type giraffeClient struct {
	cc grpc.ClientConnInterface
}

func NewGiraffeClient(cc grpc.ClientConnInterface) GiraffeClient {
	return &giraffeClient{cc}
}

func (c *giraffeClient) GiraffeSayHello(ctx context.Context, in *GiraffeRequest, opts ...grpc.CallOption) (*GiraffeReply, error) {
	out := new(GiraffeReply)
	err := c.cc.Invoke(ctx, Giraffe_GiraffeSayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GiraffeServer is the server API for Giraffe service.
// All implementations must embed UnimplementedGiraffeServer
// for forward compatibility
type GiraffeServer interface {
	GiraffeSayHello(context.Context, *GiraffeRequest) (*GiraffeReply, error)
	mustEmbedUnimplementedGiraffeServer()
}

// UnimplementedGiraffeServer must be embedded to have forward compatible implementations.
type UnimplementedGiraffeServer struct {
}

func (UnimplementedGiraffeServer) GiraffeSayHello(context.Context, *GiraffeRequest) (*GiraffeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiraffeSayHello not implemented")
}
func (UnimplementedGiraffeServer) mustEmbedUnimplementedGiraffeServer() {}

// UnsafeGiraffeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GiraffeServer will
// result in compilation errors.
type UnsafeGiraffeServer interface {
	mustEmbedUnimplementedGiraffeServer()
}

func RegisterGiraffeServer(s grpc.ServiceRegistrar, srv GiraffeServer) {
	s.RegisterService(&Giraffe_ServiceDesc, srv)
}

func _Giraffe_GiraffeSayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiraffeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiraffeServer).GiraffeSayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Giraffe_GiraffeSayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiraffeServer).GiraffeSayHello(ctx, req.(*GiraffeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Giraffe_ServiceDesc is the grpc.ServiceDesc for Giraffe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Giraffe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Giraffe",
	HandlerType: (*GiraffeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GiraffeSayHello",
			Handler:    _Giraffe_GiraffeSayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "giraffe_service.proto",
}
